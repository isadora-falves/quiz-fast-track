// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	input "quiz-fast-track/internal/usecases/ports/input"

	mock "github.com/stretchr/testify/mock"

	output "quiz-fast-track/internal/usecases/ports/output"
)

// CorrectQuizUseCase is an autogenerated mock type for the CorrectQuizUseCase type
type CorrectQuizUseCase struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0
func (_m *CorrectQuizUseCase) Execute(_a0 input.QuizInput) (*output.QuizOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *output.QuizOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(input.QuizInput) (*output.QuizOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(input.QuizInput) *output.QuizOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*output.QuizOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(input.QuizInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCorrectQuizUseCase creates a new instance of CorrectQuizUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCorrectQuizUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *CorrectQuizUseCase {
	mock := &CorrectQuizUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
